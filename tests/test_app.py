"""Tests for app.py and cli.py."""
from unittest import TestCase
from tempfile import TemporaryDirectory

import pytest

from retag_opus import app


class TestApp(TestCase):
    """Tests for the main function run() of the app."""

    @pytest.fixture(autouse=True)
    def capsys(self, capsys) -> None:  # type: ignore
        """Fixture for capturing system output."""
        self.capsys = capsys  # type: ignore

    def test_print_version(self) -> None:
        """Test printing version."""
        with self.assertRaises(SystemExit):
            app.run(["--version"])
        captured = self.capsys.readouterr()  # type: ignore
        self.assertRegex(captured.out, r"^retag \(version 0.3.0\)$")

    def test_print_help(self) -> None:
        """Test printing help."""
        with self.assertRaises(SystemExit):
            app.run(["--help"])
        captured = self.capsys.readouterr()  # type: ignore
        self.assertRegex(captured.out, r"^usage:.*")

    def test_print_completion_script(self) -> None:
        """Test printing completion scripts."""
        with self.assertRaises(SystemExit):
            app.run(["--print-completion", "bash"])
        captured = self.capsys.readouterr()  # type: ignore
        self.assertRegex(captured.out, r"^# AUTOMATCALLY GENERATED by `shtab`")

    def test_no_songs_in_directory(self) -> None:
        """Test logging warning when no opus files in provided dir."""
        with TemporaryDirectory() as temp_dir:
            exit_code = app.run(["--directory", temp_dir])
        captured = self.capsys.readouterr()  # type: ignore
        self.assertEqual(0, exit_code)
        self.assertRegex(captured.out, r"^\x1b\[33mThere appears to be no .opus files in the provided directory /tmp.*")

    def test_directory_not_found(self) -> None:
        """Providing non-existent directory."""
        exit_code = app.run(["--directory", "/this/does/not/exist/"])
        captured = self.capsys.readouterr()  # type: ignore
        self.assertEqual(1, exit_code)
        self.assertRegex(captured.out, r"^\x1b\[31m/this/does/not/exist/ is not a directory!\n")
